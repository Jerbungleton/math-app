import { Link } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { generateProblem, generateQuiz } from '../../utils/mathProblemGenerator';
import { defaultFlashcards } from '../../utils/defaultFlashcards';
import {
  loadFlashcardSets,
  saveFlashcardSets,
  createNewSet,
  deleteSet,
  addCardToSet,
  updateCardInSet,
  deleteCardFromSet,
  updateCardConfidence,
  getNextCard,
} from '../../utils/flashcardManager';
import '../../components/styles/Flashcard.css';

export default function BasicOperationsPage() {
  // Regular states
  const [activeTab, setActiveTab] = useState('getting-started');
  const [score, setScore] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [userAnswer, setUserAnswer] = useState('');
  const [difficulty, setDifficulty] = useState('easy');

  // Practice states
  const [currentProblem, setCurrentProblem] = useState(0);
  const [currentPracticeProblem, setCurrentPracticeProblem] = useState(generateProblem('easy'));

  // Quiz states
  const [quizScore, setQuizScore] = useState(0);
  const [showQuizResult, setShowQuizResult] = useState(false);
  const [currentQuizQuestion, setCurrentQuizQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [quizQuestions, setQuizQuestions] = useState(generateQuiz(4, 'easy'));

  // Flashcard states
  const [showFlashcard, setShowFlashcard] = useState(false);
  const [currentFlashcard, setCurrentFlashcard] = useState(0);
  const [flashcardMode, setFlashcardMode] = useState('premade');
  const [activeFlashcards, setActiveFlashcards] = useState([...defaultFlashcards]);
  const [showAddCard, setShowAddCard] = useState(false);
  const [newCardFront, setNewCardFront] = useState('');
  const [newCardBack, setNewCardBack] = useState('');
  const [editingCard, setEditingCard] = useState(null);
  const [flashcardSets, setFlashcardSets] = useState({ 'Default Set': [...defaultFlashcards] });
  const [currentSet, setCurrentSet] = useState('Default Set');
  const [showAddSet, setShowAddSet] = useState(false);
  const [newSetName, setNewSetName] = useState('');
  const [reviewMode, setReviewMode] = useState('sequential');
  const [slideDirection, setSlideDirection] = useState(null);

  // Load flashcard sets from localStorage on mount
  useEffect(() => {
    const savedSets = loadFlashcardSets();
    if (Object.keys(savedSets).length > 0) {
      setFlashcardSets(prev => ({ ...prev, ...savedSets }));
    }
  }, []);

  // Update active flashcards when mode or set changes
  useEffect(() => {
    console.log('Mode changed to:', flashcardMode);
    const cards = flashcardMode === 'premade' ? defaultFlashcards : (flashcardSets[currentSet] || []);
    console.log('Setting cards:', cards);
    setActiveFlashcards(cards);
    setCurrentFlashcard(0);
    setShowFlashcard(false);
  }, [flashcardMode, currentSet, flashcardSets]);

  const handleCreateSet = () => {
    if (newSetName.trim()) {
      const updatedSets = createNewSet(flashcardSets, newSetName);
      setFlashcardSets(updatedSets);
      setCurrentSet(newSetName);
      setNewSetName('');
      setShowAddSet(false);
    }
  };

  const handleDeleteSet = (setName) => {
    if (setName === 'Default Set') return;
    const updatedSets = deleteSet(flashcardSets, setName);
    setFlashcardSets(updatedSets);
    setCurrentSet('Default Set');
  };

  const handleAddCard = () => {
    if (newCardFront.trim() && newCardBack.trim()) {
      const newCard = {
        id: `card-${Date.now()}`,
        front: newCardFront,
        back: newCardBack
      };

      if (editingCard) {
        const updatedSets = updateCardInSet(flashcardSets, currentSet, editingCard.id, newCard);
        setFlashcardSets(updatedSets);
      } else {
        const updatedSets = addCardToSet(flashcardSets, currentSet, newCard);
        setFlashcardSets(updatedSets);
      }

      setNewCardFront('');
      setNewCardBack('');
      setShowAddCard(false);
      setEditingCard(null);
    }
  };

  const handleDeleteCard = (cardId) => {
    const updatedSets = deleteCardFromSet(flashcardSets, currentSet, cardId);
    setFlashcardSets(updatedSets);
    
    if (flashcardSets[currentSet].length <= 1) {
      setCurrentFlashcard(0);
    } else if (currentFlashcard === flashcardSets[currentSet].length - 1) {
      setCurrentFlashcard(currentFlashcard - 1);
    }
  };

  const handleNextCard = () => {
    if (!activeFlashcards || activeFlashcards.length === 0) return;
    setSlideDirection('right');
    const nextIndex = getNextCard(activeFlashcards, reviewMode, currentFlashcard);
    setTimeout(() => {
      setCurrentFlashcard(nextIndex);
      setShowFlashcard(false);
      setSlideDirection(null);
    }, 300);
  };

  const handlePrevCard = () => {
    if (!activeFlashcards || activeFlashcards.length === 0) return;
    setSlideDirection('left');
    const prevIndex = currentFlashcard === 0 ? activeFlashcards.length - 1 : currentFlashcard - 1;
    setTimeout(() => {
      setCurrentFlashcard(prevIndex);
      setShowFlashcard(false);
      setSlideDirection(null);
    }, 300);
  };

  const handleEditCard = (card) => {
    setEditingCard(card);
    setNewCardFront(card.front);
    setNewCardBack(card.back);
    setShowAddCard(true);
  };

  const handleConfidenceRating = (rating) => {
    if (!activeFlashcards[currentFlashcard]) return;
    
    const updatedSets = updateCardConfidence(
      flashcardSets, 
      currentSet, 
      activeFlashcards[currentFlashcard].id, 
      rating
    );
    setFlashcardSets(updatedSets);
    handleNextCard();
  };

  // Practice and quiz handlers...
  const handleNextProblem = () => {
    if (currentProblem < practiceProblemsList.length - 1) {
      setCurrentProblem(currentProblem + 1);
      setShowAnswer(false);
      setUserAnswer('');
    }
  };

  const handlePrevProblem = () => {
    if (currentProblem > 0) {
      setCurrentProblem(currentProblem - 1);
      setShowAnswer(false);
      setUserAnswer('');
    }
  };

  const handleQuizAnswer = (selectedIndex) => {
    if (selectedAnswer === null) {
      setSelectedAnswer(selectedIndex);
      if (selectedIndex === quizQuestions[currentQuizQuestion].correctAnswer) {
        setQuizScore(quizScore + 1);
      }
    }
  };

  const handleNextQuestion = () => {
    if (currentQuizQuestion < quizQuestions.length - 1) {
      setCurrentQuizQuestion(currentQuizQuestion + 1);
      setSelectedAnswer(null);
    } else {
      setShowQuizResult(true);
    }
  };

  const handleNewPracticeProblem = () => {
    setCurrentPracticeProblem(generateProblem(difficulty));
    setShowAnswer(false);
    setUserAnswer('');
  };

  const startNewQuiz = () => {
    setQuizQuestions(generateQuiz(4, difficulty));
    setCurrentQuizQuestion(0);
    setQuizScore(0);
    setShowQuizResult(false);
    setSelectedAnswer(null);
  };

  // JSX return...
  return (
    <div className="container mx-auto px-4 py-12">
      {/* Navigation buttons */}
      <div className="mb-8">
        <Link to="/pre-algebra" className="text-brand-primary hover:text-brand-primary-dark">
          ‚Üê Back to Pre-Algebra
        </Link>
      </div>
      
      <h1 className="text-4xl font-bold mb-8 text-brand-primary-dark text-center animate-fade-in">
        Basic Operations
      </h1>

      {/* Tab buttons */}
      <div className="mb-8">
        <div className="flex gap-4 justify-center mb-4">
          <button
            onClick={() => {
              setActiveTab('getting-started');
              setShowAnswer(false);
              setUserAnswer('');
            }}
            className={`px-6 py-2 rounded-lg transition-colors duration-300 ${
              activeTab === 'getting-started'
                ? 'bg-brand-primary text-brand-text-light'
                : 'bg-brand-surface text-brand-text-dark'
            }`}
          >
            Getting Started
          </button>
          <button
            onClick={() => {
              setActiveTab('practice');
              setShowAnswer(false);
              setUserAnswer('');
              setCurrentPracticeProblem(generateProblem(difficulty));
            }}
            className={`px-6 py-2 rounded-lg transition-colors duration-300 ${
              activeTab === 'practice'
                ? 'bg-brand-primary text-brand-text-light'
                : 'bg-brand-surface text-brand-text-dark'
            }`}
          >
            Practice Mode
          </button>
          <button
            onClick={() => {
              setActiveTab('quiz');
              setShowQuizResult(false);
              setCurrentQuizQuestion(0);
              setQuizScore(0);
              setSelectedAnswer(null);
              startNewQuiz();
            }}
            className={`px-6 py-2 rounded-lg transition-colors duration-300 ${
              activeTab === 'quiz'
                ? 'bg-brand-primary text-brand-text-light'
                : 'bg-brand-surface text-brand-text-dark'
            }`}
          >
            Quiz
          </button>
          <button
            onClick={() => {
              setActiveTab('flashcards');
              setShowFlashcard(false);
              setCurrentFlashcard(0);
            }}
            className={`px-6 py-2 rounded-lg transition-colors duration-300 ${
              activeTab === 'flashcards'
                ? 'bg-brand-primary text-brand-text-light'
                : 'bg-brand-surface text-brand-text-dark'
            }`}
          >
            Flashcards
          </button>
        </div>
      </div>

      {/* Flashcards content */}
      {activeTab === 'flashcards' && (
        <div className="content-card max-w-4xl mx-auto">
          {/* Mode selection */}
          <div className="mb-6 flex justify-center gap-4">
            <button
              onClick={() => setFlashcardMode('premade')}
              className={`px-6 py-2 rounded-lg transition-colors duration-300 ${
                flashcardMode === 'premade'
                  ? 'bg-brand-primary text-brand-text-light'
                  : 'bg-brand-surface text-brand-text-dark'
              }`}
            >
              Pre-made Cards
            </button>
            <button
              onClick={() => setFlashcardMode('custom')}
              className={`px-6 py-2 rounded-lg transition-colors duration-300 ${
                flashcardMode === 'custom'
                  ? 'bg-brand-primary text-brand-text-light'
                  : 'bg-brand-surface text-brand-text-dark'
              }`}
            >
              My Flashcards
            </button>
          </div>

          {/* Custom mode UI */}
          {flashcardMode === 'custom' && (
            <div className="mb-6 space-y-4">
              {/* Set management */}
              <div className="flex gap-4 items-center justify-center">
                <select
                  value={currentSet}
                  onChange={(e) => {
                    setCurrentSet(e.target.value);
                    setCurrentFlashcard(0);
                    setShowFlashcard(false);
                  }}
                  className="px-4 py-2 border border-brand-secondary rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-primary"
                >
                  {Object.keys(flashcardSets).map(setName => (
                    <option key={setName} value={setName}>{setName}</option>
                  ))}
                </select>
                <button
                  onClick={() => setShowAddSet(true)}
                  className="px-4 py-2 bg-brand-primary text-brand-text-light rounded-lg hover:bg-brand-primary-dark"
                >
                  New Set
                </button>
                {currentSet !== 'Default Set' && (
                  <button
                    onClick={() => handleDeleteSet(currentSet)}
                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
                  >
                    Delete Set
                  </button>
                )}
              </div>

              {/* New set dialog */}
              {showAddSet && (
                <div className="mb-4 p-4 bg-white rounded-lg shadow-md">
                  <input
                    type="text"
                    value={newSetName}
                    onChange={(e) => setNewSetName(e.target.value)}
                    placeholder="Enter set name"
                    className="w-full px-3 py-2 mb-2 border border-brand-secondary rounded-lg focus:ring-2 focus:ring-brand-primary"
                  />
                  <div className="flex gap-2 justify-end">
                    <button
                      onClick={handleCreateSet}
                      className="px-4 py-2 bg-brand-primary text-brand-text-light rounded-lg hover:bg-brand-primary-dark"
                    >
                      Create Set
                    </button>
                    <button
                      onClick={() => {
                        setShowAddSet(false);
                        setNewSetName('');
                      }}
                      className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              )}

              {/* Add card button */}
              <div className="flex justify-center">
                <button
                  onClick={() => {
                    setShowAddCard(true);
                    setEditingCard(null);
                    setNewCardFront('');
                    setNewCardBack('');
                  }}
                  className="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors duration-300"
                >
                  Create New Flashcard
                </button>
              </div>
            </div>
          )}

          {/* Add/Edit card form */}
          {showAddCard && (
            <div className="mb-6 p-6 bg-white rounded-lg shadow-md">
              <h3 className="text-xl font-semibold mb-4 text-brand-primary-dark">
                {editingCard ? 'Edit Flashcard' : 'Create New Flashcard'}
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-brand-text-dark mb-1">
                    Front Side
                  </label>
                  <textarea
                    value={newCardFront}
                    onChange={(e) => setNewCardFront(e.target.value)}
                    className="w-full px-3 py-2 border border-brand-secondary rounded-lg focus:ring-2 focus:ring-brand-primary"
                    rows="3"
                    placeholder="Enter the question or concept"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-brand-text-dark mb-1">
                    Back Side
                  </label>
                  <textarea
                    value={newCardBack}
                    onChange={(e) => setNewCardBack(e.target.value)}
                    className="w-full px-3 py-2 border border-brand-secondary rounded-lg focus:ring-2 focus:ring-brand-primary"
                    rows="3"
                    placeholder="Enter the answer or explanation"
                  />
                </div>
                <div className="flex gap-4">
                  <button
                    onClick={handleAddCard}
                    className="px-6 py-2 bg-brand-primary text-brand-text-light rounded-lg hover:bg-brand-primary-dark"
                  >
                    {editingCard ? 'Save Changes' : 'Add Card'}
                  </button>
                  <button
                    onClick={() => {
                      setShowAddCard(false);
                      setEditingCard(null);
                    }}
                    className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Flashcard display */}
          {activeFlashcards?.length > 0 ? (
            <>
              <div className="mb-4">
                {/* Review mode selection */}
                <div className="flex justify-center gap-4 mb-4">
                  <button
                    onClick={() => setReviewMode('sequential')}
                    className={`px-4 py-2 rounded-lg ${
                      reviewMode === 'sequential'
                        ? 'bg-brand-primary text-brand-text-light'
                        : 'bg-brand-surface text-brand-text-dark'
                    }`}
                  >
                    Sequential
                  </button>
                  <button
                    onClick={() => setReviewMode('random')}
                    className={`px-4 py-2 rounded-lg ${
                      reviewMode === 'random'
                        ? 'bg-brand-primary text-brand-text-light'
                        : 'bg-brand-surface text-brand-text-dark'
                    }`}
                  >
                    Random
                  </button>
                  <button
                    onClick={() => setReviewMode('confidence')}
                    className={`px-4 py-2 rounded-lg ${
                      reviewMode === 'confidence'
                        ? 'bg-brand-primary text-brand-text-light'
                        : 'bg-brand-surface text-brand-text-dark'
                    }`}
                  >
                    Focus on Weak Cards
                  </button>
                </div>

                {/* Flashcard */}
                <div className="flashcard-container">
                  <div 
                    className={`flashcard ${showFlashcard ? 'flipped' : ''} ${
                      slideDirection === 'right' ? 'slide-right-exit-active' :
                      slideDirection === 'left' ? 'slide-left-exit-active' : ''
                    }`}
                    onClick={() => setShowFlashcard(!showFlashcard)}
                  >
                    <div className="flashcard-front">
                      <div className="text-xl text-brand-text-dark">
                        {activeFlashcards[currentFlashcard]?.front}
                      </div>
                    </div>
                    <div className="flashcard-back">
                      <div className="flex flex-col items-center gap-4">
                        <pre className="text-xl text-brand-text-dark whitespace-pre-line font-sans mb-4">
                          {activeFlashcards[currentFlashcard]?.back}
                        </pre>
                        <div className="flex flex-col items-center">
                          <p className="text-sm text-brand-text-dark mb-2">How well did you know this?</p>
                          <div className="flex gap-2">
                            {[1, 2, 3, 4, 5].map(rating => (
                              <button
                                key={rating}
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleConfidenceRating(rating);
                                }}
                                className={`w-8 h-8 rounded-full ${
                                  (activeFlashcards[currentFlashcard]?.confidence || 0) >= rating
                                    ? 'bg-green-500'
                                    : 'bg-gray-300'
                                } text-white hover:bg-green-600 transition-colors`}
                              >
                                {rating}
                              </button>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Navigation buttons */}
              <div className="flex justify-between items-center mt-6">
                <button
                  onClick={handlePrevCard}
                  className="px-6 py-2 bg-brand-primary text-brand-text-light rounded-lg hover:bg-brand-primary-dark"
                >
                  Previous
                </button>
                <span className="text-brand-text-dark">
                  Card {currentFlashcard + 1} of {activeFlashcards.length}
                  {activeFlashcards[currentFlashcard]?.confidence ? 
                    ` (Confidence: ${activeFlashcards[currentFlashcard].confidence}/5)` : ''}
                </span>
                <button
                  onClick={handleNextCard}
                  className="px-6 py-2 bg-brand-primary text-brand-text-light rounded-lg hover:bg-brand-primary-dark"
                >
                  Next
                </button>
              </div>

              {/* Card management buttons */}
              {flashcardMode === 'custom' && (
                <div className="mt-4 flex justify-center gap-4">
                  <button
                    onClick={() => handleEditCard(activeFlashcards[currentFlashcard])}
                    className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600"
                  >
                    Edit Current Card
                  </button>
                  <button
                    onClick={() => handleDeleteCard(activeFlashcards[currentFlashcard].id)}
                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
                  >
                    Delete Current Card
                  </button>
                </div>
              )}
            </>
          ) : flashcardMode === 'custom' ? (
            <div className="text-center text-brand-text-dark py-8">
              <p className="mb-4">You haven't created any flashcards yet!</p>
              <button
                onClick={() => setShowAddCard(true)}
                className="px-6 py-2 bg-brand-primary text-brand-text-light rounded-lg hover:bg-brand-primary-dark"
              >
                Create Your First Flashcard
              </button>
            </div>
          ) : null}
        </div>
      )}
    </div>
  );
}
